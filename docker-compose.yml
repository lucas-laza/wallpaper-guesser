version: '3.8'

services:
  db:
    image: mysql:8.0
    container_name: wallpaper-guessr-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: wallpaper_guessr
      MYSQL_USER: wallpaper_user
      MYSQL_PASSWORD: wallpaper_password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - wallpaper-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s

  wallpaper:
    build:
      context: ./wallpaper
      dockerfile: Dockerfile
    container_name: wallpaper-guessr-wallpaper
    restart: unless-stopped
    ports:
      - "3301:3301"
    environment:
      - NODE_ENV=production
      - API_SERVICE_URL=http://api:3300
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - wallpaper_images:/app/dist/images
    networks:
      - wallpaper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3301/health"]
      timeout: 10s
      retries: 5
      interval: 15s
      start_period: 30s

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: wallpaper-guessr-api
    restart: unless-stopped
    ports:
      - "3300:3300"
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_PORT=3306
      - DB_NAME=wallpaper_guessr
      - DB_USER=wallpaper_user
      - DB_PASSWORD=wallpaper_password
      - JWT_SECRET=JWT_AAGOBkza0z52
      - WALLPAPER_SERVICE_URL=http://wallpaper:3301
    depends_on:
      db:
        condition: service_healthy
      wallpaper:
        condition: service_healthy
    networks:
      - wallpaper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3300/health"]
      timeout: 10s
      retries: 5
      interval: 15s
      start_period: 60s 

  front:
    build:
      context: ./front
      dockerfile: Dockerfile
    container_name: wallpaper-guessr-front
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - wallpaper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  wallpaper-network:
    driver: bridge

volumes:
  mysql_data:
  wallpaper_images: